# This is the stylesheet customization for code2color/code2html.

my ($bold, $underline, $reverse, $reset, $red, $green, $yellow, $blue,
    $magenta, $cyan);

eval "use Term::ANSIColor";
if ($@) {
  $bold = "\e[1m";
  $underline = "\e[4m";
  $reverse = "\e[7m";
  $reset = "\e[0m";
  $red = "\e[31m";
  $green = "\e[32m";
  $yellow = "\e[33m";
  $blue = "\e[34m";
  $magenta = "\e[35m";
  $cyan = "\e[36m";
} else {
  $bold = color('bold');
  $underline = color('underline');
  $reverse = color('reverse');
  $reset = color('reset');
  $red = color('red');
  $green = color('green');
  $yellow = color('yellow');
  $blue = color('blue');
  $magenta = color('magenta');
  $cyan = color('cyan');
}

$STYLESHEET{'xterm'} =
  { 'template'     => '%%code%%',
    'content-type' => 'text/html',
    'linenumbers'  =>
    { 'none'       => sub { return $_[0]; },
      'normal'     => sub {
        my @lines = split ( /\n/, $_[0] );
        my $nr = 0;
        my $lengthofnr = length(@lines);
        my $format = qq{%${lengthofnr}u %s\n};
        join('', map (  {$nr++; sprintf ( $format , $nr, $_ )} @lines));
      },
      'linked'     => sub {
        # is not defined for xterm output, therefore do nothing
        return $_[0];
      },
    },
    'tags'         =>
    {
     'comment'                => { 'start' => $blue,
                                   'stop'  => $reset },
     'doc comment'            => { 'start' => "$bold$blue",
                                   'stop'  => $reset },
     'string'                 => { 'start' => $red,
                                   'stop'  => $reset },
     'esc string'             => { 'start' => $magenta,
                                   'stop'  => $reset },
     'character'              => { 'start' => $reset,
                                   'stop'  => $reset },
     'esc character'          => { 'start' => $magenta,
                                   'stop'  => $reset },
     'numeric'                => { 'start' => $red,
                                   'stop'  => $reset },
     'identifier'             => { 'start' => $cyan,
                                   'stop'  => $reset },
     'predefined identifier'  => { 'start' => $cyan,
                                   'stop'  => $reset },
     'type'                   => { 'start' => $cyan,
                                   'stop'  => $reset },
     'predefined type'        => { 'start' => $green,
                                   'stop'  => $reset },
     'reserved word'          => { 'start' => "$yellow",
                                   'stop'  => $reset },
     'library function'       => { 'start' => $reset,
                                   'stop'  => $reset },
     'include'                => { 'start' => $green,
                                   'stop'  => $reset },
     'preprocessor'           => { 'start' => $green,
                                   'stop'  => $reset },
     'braces'                 => { 'start' => $reset,
                                   'stop'  => $reset },
     'symbol'                 => { 'start' => $green,
                                   'stop'  => $reset },
     'function header'        => { 'start' => "$bold$red",
                                   'stop'  => $reset },
     'function header name'   => { 'start' => "$bold$cyan",
                                   'stop'  => $reset },
     'function header args'   => { 'start' => $cyan,
                                   'stop'  => $reset },
     'regex'                  => { 'start' => $magenta,
                                   'stop'  => $reset },
     'text'                   => { 'start' => $red,
                                   'stop'  => $reset},

     # HTML
     'entity'                 => { 'start' => $green,
                                   'stop'  => $reset },

     # MAKEFILE
     'assignment'             => { 'start' => $green,
                                   'stop'  => $reset },
     'dependency line'        => { 'start' => $cyan,
                                   'stop'  => $reset },
     'dependency target'      => { 'start' => $blue,
                                   'stop'  => $reset },
     'dependency continuation'=> { 'start' => $magenta,
                                   'stop'  => $reset },
     'continuation'           => { 'start' => $magenta,
                                   'stop'  => $reset },
     'macro'                  => { 'start' => $red,
                                   'stop'  => $reset },
     'int macro'              => { 'start' => $red,
                                   'stop'  => $reset },
     'esc $$$'                => { 'start' => $yellow,
                                   'stop'  => $reset },
     'separator'              => { 'start' => $green,
                                   'stop'  => $reset },
     'line spec'              => { 'start' => $cyan,
                                   'stop'  => $reset },
     'deletion'               => { 'start' => $red,
                                   'stop'  => $reset },
     'insertion'              => { 'start' => $green,
                                   'stop'  => $reset },
     'modification'           => { 'start' => $magenta,
                                   'stop'  => $reset },
    }
  };
